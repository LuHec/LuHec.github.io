<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/03/02/%E9%BB%91%E6%9D%BF%E5%80%BC0gc%E4%BC%98%E5%8C%96/"/>
    <url>/2024/03/02/%E9%BB%91%E6%9D%BF%E5%80%BC0gc%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h3><h4 id="Quick-view"><a href="#Quick-view" class="headerlink" title="Quick view"></a>Quick view</h4><p>行为树的黑板值一般以string:object的形式存储在字典里，无论是设置值还是拿来用，值类型都要进行拆装箱。据微软给出的分析，就可以知道拆装箱的消耗有多大，更何况行为树的黑板值很多都需要每帧更新，可见很有必要优化掉这一步：<br><img src="/Pictures/Pasted%20image%2020240302181001.png"></p><h4 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h4><p>我们需要动态多态，这样才能统一存储在字典里。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">public abstract <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ABtValue</span></span><br><span class="hljs-class">&#123;</span><br>    public abstract Type BtValueType &#123; get; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们需要静态多态，这样才能返回对应的类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">public interface IBtValue&lt;T&gt;<br>&#123;<br>    T <span class="hljs-title function_">GetValue</span><span class="hljs-params">()</span>;<br>    <span class="hljs-type">void</span> <span class="hljs-title function_">SetValue</span><span class="hljs-params">(T value)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了去掉装箱，我们需要自行多封装一层。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">public abstract <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BtValue</span>&lt;</span>T&gt; : ABtValue, IBtValue&lt;T&gt;<br>&#123;<br>    public override Type BtValueType =&gt; typeof(T);<br><br>    private T m_Value;<br>    <br>    public T <span class="hljs-title function_">GetValue</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> m_Value;<br>    &#125;<br><br>    public <span class="hljs-type">void</span> <span class="hljs-title function_">SetValue</span><span class="hljs-params">(T value)</span><br>    &#123;<br>        m_Value = value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>黑板通过动态多态获取值，静态多态获取对应的目标类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Blackboard</span></span><br><span class="hljs-class">&#123;</span><br>    private Dictionary&lt;<span class="hljs-built_in">string</span>, ABtValue&gt; m_Blackboard;<br><br>    <span class="hljs-comment">/// &lt;summary&gt;</span><br>    <span class="hljs-comment">/// 设置对应的数据</span><br>    <span class="hljs-comment">/// &lt;/summary&gt;</span><br>    <span class="hljs-comment">/// &lt;param name=&quot;key&quot;&gt;黑板值名称&lt;/param&gt;</span><br>    <span class="hljs-comment">/// &lt;param name=&quot;value&quot;&gt;新黑板值&lt;/param&gt;</span><br>    <span class="hljs-comment">/// &lt;typeparam name=&quot;T&quot;&gt;黑板值的类型，如果不匹配则设置失败&lt;/typeparam&gt;</span><br>    public <span class="hljs-type">void</span> SetData&lt;T&gt;(<span class="hljs-built_in">string</span> key, T value)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (m_Blackboard.TryGetValue(key, out var data))<br>        &#123;<br>            <span class="hljs-keyword">if</span> (data is IBtValue&lt;T&gt; btValue)<br>            &#123;<br>                btValue.SetValue(value);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c">using System;<br>using UnityEngine;<br>using Object = System.Object;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BtValueInt</span> :</span> BtValue&lt;<span class="hljs-type">int</span>&gt;, IEquatable&lt;BtValueInt&gt;<br>&#123;<br>    public <span class="hljs-type">bool</span> <span class="hljs-title function_">Equals</span><span class="hljs-params">(BtValueInt other)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (other is null) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">if</span> (Object.ReferenceEquals(this, other)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">if</span> (this.GetType() != other.GetType()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br><br>        <span class="hljs-keyword">return</span> this.GetValue() == other.GetValue();<br>    &#125;<br><br><br>    public override <span class="hljs-type">bool</span> <span class="hljs-title function_">Equals</span><span class="hljs-params">(object obj)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (ReferenceEquals(null, obj))<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (ReferenceEquals(this, obj))<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (obj.GetType() != this.GetType())<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> Equals((BtValueInt)obj);<br>    &#125;<br><br>    public override <span class="hljs-type">int</span> <span class="hljs-title function_">GetHashCode</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> GetValue().GetHashCode();<br>    &#125;<br><br>    public <span class="hljs-type">static</span> <span class="hljs-type">bool</span> operator ==(BtValueInt lhs, BtValueInt rhs)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ReferenceEquals(lhs, null))<br>        &#123;<br>            <span class="hljs-keyword">if</span> (ReferenceEquals(rhs, null))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (ReferenceEquals(lhs, null)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> lhs.Equals(rhs);<br>    &#125;<br><br>    public <span class="hljs-type">static</span> <span class="hljs-type">bool</span> operator !=(BtValueInt lhs, BtValueInt rhs)<br>    &#123;<br>        <span class="hljs-keyword">return</span> !(lhs == rhs);<br>    &#125;<br><br>    public <span class="hljs-type">static</span> <span class="hljs-type">bool</span> operator &gt;(BtValueInt lhs, BtValueInt rhs)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ReferenceEquals(lhs, null))<br>        &#123;<br>            <span class="hljs-keyword">if</span> (ReferenceEquals(rhs, null))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (ReferenceEquals(lhs, null)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> lhs.GetValue() &gt; rhs.GetValue();<br>    &#125;<br><br>    public <span class="hljs-type">static</span> <span class="hljs-type">bool</span> operator &lt;(BtValueInt lhs, BtValueInt rhs)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ReferenceEquals(lhs, null))<br>        &#123;<br>            <span class="hljs-keyword">if</span> (ReferenceEquals(rhs, null))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (ReferenceEquals(lhs, null)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> lhs.GetValue() &lt; rhs.GetValue();<br>    &#125;<br><br>    public <span class="hljs-type">static</span> <span class="hljs-type">bool</span> operator &gt;=(BtValueInt lhs, BtValueInt rhs)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ReferenceEquals(lhs, null))<br>        &#123;<br>            <span class="hljs-keyword">if</span> (ReferenceEquals(rhs, null))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (ReferenceEquals(lhs, null)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> lhs.GetValue() &gt;= rhs.GetValue();<br>    &#125;<br><br>    public <span class="hljs-type">static</span> <span class="hljs-type">bool</span> operator &lt;=(BtValueInt lhs, BtValueInt rhs)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ReferenceEquals(lhs, null))<br>        &#123;<br>            <span class="hljs-keyword">if</span> (ReferenceEquals(rhs, null))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (ReferenceEquals(lhs, null)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> lhs.GetValue() &lt;= rhs.GetValue();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Gta5 Task系统</title>
    <link href="/2023/12/28/Gta5-Task%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/12/28/Gta5-Task%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p>探索一下Gta5的Task系统。</p><h4 id="Task系统组成"><a href="#Task系统组成" class="headerlink" title="Task系统组成"></a>Task系统组成</h4><p><strong>aiTaskTree</strong><br><strong>aiTask</strong><br><strong>aiTaskManager</strong></p><h4 id="TaskTree"><a href="#TaskTree" class="headerlink" title="TaskTree"></a>TaskTree</h4><p>入口函数<code>Process</code>以及<code>UpdateTasks</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">CTaskTree::Process</span><span class="hljs-params">(<span class="hljs-type">float</span> fTimeStep)</span><br>&#123;<br>STRVIS_AUTO_CONTEXT(strStreamingVisualize::TASKTREE);<br><br><span class="hljs-comment">//main tasks</span><br>UpdateTasks(<span class="hljs-literal">false</span>, <span class="hljs-number">-1</span>, fTimeStep);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>UpdateTasks</code>会运行任务队列，当任务执行完后会自动执行下一个任务。任务有优先级，会优先执行等级高的。同时由<code>BeginTaskUpdates</code>和<code>EndTaskUpdates</code>记录运行时间。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">aiTaskTree::UpdateTasks</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">bool</span> bDontDeleteHeadTask, <span class="hljs-type">const</span> s32 iDefaultTaskPriority, <span class="hljs-type">float</span> timeStep)</span><br>&#123;<br>aiTask::BeginTaskUpdates(timeStep);<br><br>m_iDeadman = <span class="hljs-number">1000</span>;<br><br><span class="hljs-comment">// Compute the priority of the main task to process.      </span><br>s32 iPriority = GetActiveTaskPriority();<br><br><span class="hljs-comment">// Keep track of the current priority of task being processed.</span><br>m_iPriorityBeingProcessed = iPriority;<br><br><span class="hljs-comment">// Process the highest priority task</span><br><span class="hljs-keyword">if</span>(iPriority &gt; <span class="hljs-number">-1</span>)<br>&#123;<br> aiTask* pCurrentTask = m_Tasks[iPriority];<br><span class="hljs-keyword">while</span>(pCurrentTask)<br>&#123;<br>UpdateResult result = UpdateTask(pCurrentTask, timeStep);<br><br><span class="hljs-keyword">if</span>(result == UR_QUIT)<br>&#123;<br><span class="hljs-comment">// If the current task is the top-most parent task and it quits, we&#x27;ll be left with no current task,</span><br><span class="hljs-comment">// tasks can optionally force the next active task to update this frame</span><br><span class="hljs-type">const</span> <span class="hljs-type">bool</span> bProcessNextActiveTaskImmediately = pCurrentTask-&gt;GetIsFlagSet(aiTaskFlags::ProcessNextActiveTaskImmediately);<br><br><span class="hljs-comment">// The movement tasks have to be kept for one frame, so don&#x27;t delete them if requested not to</span><br><span class="hljs-keyword">if</span>(bDontDeleteHeadTask == <span class="hljs-literal">false</span>)<br>&#123;<br>DeleteTask(pCurrentTask);<br>&#125;<br><br><span class="hljs-comment">// Create a new default task if the last one was just deleted.</span><br><span class="hljs-keyword">if</span>(iPriority == iDefaultTaskPriority)<br>&#123;<br><span class="hljs-keyword">if</span>(m_pEntity)<br>&#123;<br><span class="hljs-comment">// Replace the default task</span><br>SetTask(GetDefaultTask(), iDefaultTaskPriority);<br><br><span class="hljs-comment">// Process the default task straight away</span><br>pCurrentTask = m_Tasks[iDefaultTaskPriority];<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>pCurrentTask = <span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">// Process the next active task straight away after we&#x27;ve finished our current task if flagged to</span><br><span class="hljs-keyword">if</span>(bProcessNextActiveTaskImmediately)<br>&#123;<br>iPriority = GetActiveTaskPriority();<br>pCurrentTask = m_Tasks[iPriority];<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>pCurrentTask = <span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>pCurrentTask = <span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Reset the priority being processed</span><br>m_iPriorityBeingProcessed = <span class="hljs-number">-1</span>;<br><br>aiTask::EndTaskUpdates();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>UpdateTask</code>重载是主要部分执行:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">UpdateResult <span class="hljs-title function_">UpdateTask</span><span class="hljs-params">(aiTask* pTask, <span class="hljs-type">float</span> timeStep)</span>;<br></code></pre></td></tr></table></figure><p>内部是循环执行<code>Task::ProcessFSM</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Call the main update function</span><br><span class="hljs-keyword">while</span>(bContinueFsmUpdate)<br>&#123;<br><span class="hljs-comment">// By default, don&#x27;t repeat the FSM update, this will be set below if the state changes</span><br>bContinueFsmUpdate = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">// Keep track of any state changes</span><br>s32 iOldState = pTask-&gt;GetState();<br><br><span class="hljs-comment">// Tell the task about it&#x27;s recording status</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> TASK_DETAILED_INFINITE_LOOP_TRAP</span><br>NOTFINAL_ONLY(pTask-&gt;SetCallstackRecordingFlagState( taskRecordingFlags ));<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">// If the state is being restarted after being aborted, simply restart the state then continue as normal</span><br><span class="hljs-comment">// OR if the state hasn&#x27;t yet started, enter the state then continue as normal</span><br><span class="hljs-keyword">if</span>(pTask-&gt;m_Flags.IsFlagSet(aiTaskFlags::RestartStateOnResume) || pTask-&gt;m_Flags.IsFlagSet(aiTaskFlags::CurrentStateNotYetEntered))<br>&#123;<br><span class="hljs-comment">// Enter the new state, reset the task pointer in case it is non-null </span><br>pTask-&gt;SetNewTask(<span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">if</span>(pTask-&gt;ProcessFSM(pTask-&gt;GetState(), aiTask::OnEnter) == aiTask::FSM_Quit)<br>&#123;<br><span class="hljs-comment">// Exit the state</span><br>pTask-&gt;ProcessFSM(pTask-&gt;GetState(), aiTask::OnExit);<br>bQuit = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>bContinueFsmUpdate = <span class="hljs-literal">true</span>;<br>pTask-&gt;DebugIndicateAContinueFSMPoint();<br>&#125;<br>...<br></code></pre></td></tr></table></figure><p>TaskTree可以中断任务：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// PURPOSE: Abort and delete all tasks above the specified priority.</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">AbortTasksAbovePriority</span><span class="hljs-params">(<span class="hljs-type">const</span> s32 iPriority)</span>;<br><br><span class="hljs-comment">// PURPOSE: Abort and delete all tasks at the specified priority</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">AbortTasksWithPriority</span><span class="hljs-params">(<span class="hljs-type">const</span> s32 iPriority)</span>;<br><br><span class="hljs-comment">// PURPOSE: Abort and delete all tasks associated with this task tree</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">AbortTasks</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><h4 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h4><p>以链表的形式存储在TaskTree，有优先级，有前后节点、执行对象</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// PURPOSE: Entity task is operating on</span><br>fwEntity* m_pEntity;<br><br><span class="hljs-comment">// PURPOSE: Parent task</span><br><span class="hljs-comment">// NOTES:   Deliberately not a regdref otherwise a constantly kept around task will be flooded with</span><br><span class="hljs-comment">//          SetParent references from children.  Delete protection should prevent you accidentally </span><br><span class="hljs-comment">//deleting through it anyway.</span><br>aiTask  *m_pParent;<br><br><span class="hljs-comment">// PURPOSE: Child task</span><br>RegdaiTask m_pSubTask;<br><br><span class="hljs-comment">// PURPOSE: New child task - will be activated by the task manager</span><br>RegdaiTask m_pNewTask;<br></code></pre></td></tr></table></figure><p>入口函数是<code>UpdateFSM</code>，由不同的Task子类重载。</p><p>以MoveTask为例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">CTask::FSM_Return <span class="hljs-title function_">CTaskMoveBase::UpdateFSM</span><span class="hljs-params">(<span class="hljs-type">const</span> s32 iState, <span class="hljs-type">const</span> FSM_Event iEvent)</span><br>&#123;<br>CPed *pPed = GetPed(); <span class="hljs-comment">//Get the ped ptr.</span><br><br>FSM_Begin<br><span class="hljs-title function_">FSM_State</span><span class="hljs-params">(State_Running)</span><br>FSM_OnUpdate<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">StateRunning_OnUpdate</span><span class="hljs-params">(pPed)</span>;<br>FSM_End<br>&#125;<br><br>CTask::FSM_Return <span class="hljs-title function_">CTaskMoveBase::StateRunning_OnUpdate</span><span class="hljs-params">(CPed* pPed)</span><br>&#123;<br><span class="hljs-keyword">if</span>(ProcessMove(pPed))<br>&#123;<br><span class="hljs-keyword">return</span> FSM_Quit;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>MoveAtSpeedInDirection(pPed);<br><br><span class="hljs-keyword">return</span> FSM_Continue;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// State machine generation macros</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FSM_Begin <span class="hljs-keyword">if</span>(iState&lt;0)&#123;<span class="hljs-keyword">if</span>(0)&#123;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FSM_End &#125;&#125;<span class="hljs-keyword">else</span>&#123;Assertf(0, <span class="hljs-string">&quot;Didn&#x27;t handle state %i in UpdateFSM&quot;</span>, iState);\</span><br><span class="hljs-meta">return(FSM_Quit);&#125;return(FSM_Continue);</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FSM_State(a)&#125;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a == iState) &#123;<span class="hljs-keyword">if</span>(0)&#123;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FSM_OnEvent(a)&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a == iEvent) &#123;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FSM_OnEnterFSM_OnEvent(OnEnter)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FSM_OnUpdateFSM_OnEvent(OnUpdate)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FSM_OnExitFSM_OnEvent(OnExit)</span><br></code></pre></td></tr></table></figure><p>宏展开是这样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c">CTask::FSM_Return <span class="hljs-title function_">CTaskMoveBase::UpdateFSM</span><span class="hljs-params">(<span class="hljs-type">const</span> s32 iState, <span class="hljs-type">const</span> FSM_Event iEvent)</span><br>&#123;<br>    CPed *pPed = GetPed(); <span class="hljs-comment">// Get the ped ptr.</span><br><br>    <span class="hljs-keyword">if</span> (iState &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span>) &#123;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            Assertf(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;Didn&#x27;t handle state %i in UpdateFSM&quot;</span>, iState);<br>            <span class="hljs-keyword">return</span> FSM_Quit;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (iState == State_Running) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span>) &#123;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (iEvent == OnUpdate) &#123;<br>                <span class="hljs-keyword">return</span> StateRunning_OnUpdate(pPed);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> FSM_Continue;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Task的回收：目前看来是不存在回收的，直接delete掉了</p><h4 id="TaskManager"><a href="#TaskManager" class="headerlink" title="TaskManager"></a>TaskManager</h4><p>每一种Ai实体都有TaskTreeManager，TaskManager有多个TaskTree。多个TaskTree按序存储在数组里。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">aiTaskManager::aiTaskManager(s32 iNumberOfTaskTreesRequired, <span class="hljs-type">bool</span> treesAreExternallyOwned)<br>: m_TreesAreExternallyOwned(treesAreExternallyOwned)<br>&#123;<br><span class="hljs-comment">// Create some empty task trees</span><br>m_Trees.Resize(iNumberOfTaskTreesRequired);<br><span class="hljs-keyword">for</span>(s32 i = <span class="hljs-number">0</span>; i &lt; iNumberOfTaskTreesRequired; i++)<br>&#123;<br>m_Trees[i] = <span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>PedTree的顺序如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//Task tree enums</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">ePedTaskTrees</span></span><br><span class="hljs-class">&#123;</span><br>PED_TASK_TREE_PRIMARY=<span class="hljs-number">0</span>,<br>PED_TASK_TREE_SECONDARY,<br>PED_TASK_TREE_MOVEMENT,<br>PED_TASK_TREE_MOTION,<br>PED_TASK_TREE_MAX<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CPedTaskManager</span> :</span> public CTaskManager<br>&#123;<br>public:<br><br>CPedTaskManager(CPed* pPed, <span class="hljs-type">int</span> iNumberOfTaskTreesRequired);<br>virtual ~CPedTaskManager();<br><br>protected:<br><br>virtual <span class="hljs-type">void</span> <span class="hljs-title function_">OnTaskChanged</span><span class="hljs-params">()</span>;<br><br>private:<br><br>CPed* m_pPed;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>源码解析</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>first post</title>
    <link href="/2023/12/28/first-post/"/>
    <url>/2023/12/28/first-post/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/12/28/hello-world/"/>
    <url>/2023/12/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
